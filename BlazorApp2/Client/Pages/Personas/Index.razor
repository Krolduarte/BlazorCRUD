@page "/indice-personas"
@using CsvHelper;
@using System.Globalization;

@inject HttpClient Http
@inject IJSRuntime JS



<h3>Clientes</h3>
<br />
<div>
    <a class="btn btn-success" href="crear-persona"><i class="bi bi-plus-square"></i></a>
    <button @onclick="ExportarCsv"><i class="bi bi-filetype-csv"></i>CSV</button>
    <button @onclick="ExportarExcel"><i class="bi bi-file-spreadsheet-fill">Excel</i></button>
</div>

@if (personas == null)
{
    <text>Cargando..</text>
}
else if (personas.Length == 0)
{
    <text>No hay personas en la BD..</text>
}
else
{
    <br />

    <table class="table">
        <thead>

            <tr>
                <th></th>
               @* <th></th>*@
                <th>Id</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Email</th>
                <th>Descripcion</th>
                <th>Fecha de Nacimiento</th>
                <th>Team Id</th>
                <th>Rol Id</th>
                <th>Disponible</th>
            </tr>
        </thead>

        <tbody>

            @foreach (var persona in personas)
            {
                <tr>
                    <td>
                        <a class="btn btn-success" href="editar-persona/@persona.Id"> <i class="oi oi-pencil"></i></a>
                        <button class="btn btn-danger" @onclick="(() => BorrarPersona(persona.Id))"> <i class="bi bi-trash"></i></button>
                    </td>
                   @* <td><img src="@persona.Image" class="rounded" style="max-height:100px;" /></td>*@
                    <td>@persona.Id</td>
                    <td>@persona.Nombre</td>
                    <td>@persona.Apellido</td>
                    <td>@persona.Email</td>
                    <td>@persona.Descripcion</td>
                    <td>@persona.BirthDate</td>
                    <td>@persona.TeamId</td>
                    <td>@persona.RolId</td>
                    <td>@persona.IsReadyToWork</td>

                </tr>
            }

        </tbody>
    </table>
    <br />


}
@code {

    Persona[] personas
    {
        get; set;
    }

    protected override async Task OnInitializedAsync() => await CargarPersonas();

    async Task CargarPersonas()
    {
        personas = await Http.GetFromJsonAsync<Persona[]>("personas");

    }

    async Task BorrarPersona(int idPersona)
    {
        var personaSeleccionada = personas.First(x => x.Id == idPersona);
        string mensajeConfirmacion = $"¿Deseas borrar a la persona {personaSeleccionada.Nombre}?";
        if (await JS.Confirm("Confirmar", mensajeConfirmacion, TipoMensajeSweetAlert.question))
        {
            await Http.DeleteAsync($"personas/{idPersona}");
            await CargarPersonas();
        }


    }

    private void ExportarCsv()
    {
        using (var memoryStream = new MemoryStream())
        {
            using (var writer = new StreamWriter(memoryStream))
            {

                using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
                {
                    csv.WriteRecords(personas);
                }

                var arr = memoryStream.ToArray();
                JS.GuardarComo("personas.csv", arr);
            }
        }
    }

    private void ExportarExcel()
    {
        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("Personas");

            var tableBody = worksheet.Cells["A1:A1"].LoadFromCollection(
                from f in personas
                select new
                {
                    f.Id,
                    f.Nombre
                }, true);

            var header = worksheet.Cells["A1:B1"];
            worksheet.DefaultColWidth = 25;
            tableBody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            tableBody.Style.Fill.PatternType = ExcelFillStyle.Solid;
            tableBody.Style.Fill.BackgroundColor.SetColor(Color.WhiteSmoke);
            tableBody.Style.Border.BorderAround(ExcelBorderStyle.Medium);
            header.Style.Font.Bold = true;
            header.Style.Font.Color.SetColor(Color.White);
            header.Style.Fill.PatternType = ExcelFillStyle.Solid;
            header.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);

            JS.GuardarComo("personas.xlsx", package.GetAsByteArray());
        }
    }



}
